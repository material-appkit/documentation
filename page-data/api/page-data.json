{"componentChunkName":"component---src-pages-api-index-js","path":"/api/","result":{"data":{"utils":{"nodes":[{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Copied verbatim from Cocoa's NSNotificationCenter:</p>\n<p>The NotificationCenter class provides a way to send notifications to objects in the same application.\nIt takes Notification objects and broadcasts them to any objects in the same task that have registered\nto receive the notification with the task’s default notification center.</p>\n<p>Weak dictionary keys are used to allow notification senders to be eligible for garbage collection.</p>"}},"name":"Notification","params":null},{"description":{"childMarkdownRemark":{"html":"<p>Creates a notification with a given name, sender, and information and posts it to the receiver.</p>"}},"name":"postNotification","params":[{"name":"notificationName","type":null},{"name":"notificationSender","type":null},{"name":"context","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Adds an entry to the receiver’s dispatch table with an observer,\na notification selector and optional criteria: notification name and sender.</p>"}},"name":"addObserver","params":[{"name":"notificationObserver","type":null},{"name":"callback","type":null},{"name":"notificationName","type":null},{"name":"notificationSender","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Removes matching entries from the receiver’s dispatch table.</p>"}},"name":"removeObserver","params":[{"name":"notificationObserver","type":null},{"name":"notificationName","type":null},{"name":"notificationSender","type":null}]}],"relativePath":"util/NotificationCenter.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>See: <a href=\"https://reactjs.org/docs/hooks-faq.html\">https://reactjs.org/docs/hooks-faq.html</a></p>"}},"name":"usePrevious","params":[{"name":"value","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Source: <a href=\"https://material-ui.com/components/use-media-query/#migrating-from-withwidth\">https://material-ui.com/components/use-media-query/#migrating-from-withwidth</a></p>\n<p>Be careful using this hook. It only works because the number of\nbreakpoints in theme is static. It will break once you change the number of\nbreakpoints.\nSee <a href=\"https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\">https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level</a></p>"}},"name":"useWidth","params":null},{"description":{"childMarkdownRemark":{"html":"<p>Utility hook to help determine why/when a component is re-rendered</p>"}},"name":"useTraceUpdate","params":[{"name":"props","type":null}]}],"relativePath":"util/hooks.js"},{"childrenDocumentationJs":[],"relativePath":"util/ServiceAgent.js"},{"childrenDocumentationJs":[],"relativePath":"util/index.js"},{"childrenDocumentationJs":[{"description":null,"name":"APIServiceProxy","params":null}],"relativePath":"util/ajax/APIServiceProxy.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Copied verbatim from Cocoa's NSNotification:</p>\n<p>NSNotification objects encapsulate information so that it can be broadcast to other objects by an NSNotificationCenter object.\nAn NSNotification object (referred to as a notification) contains a name, an object, and an optional dictionary.\nThe name is a tag identifying the notification. The object is any object that the poster of the notification wants to send\nto observers of that notification (typically, it is the object that posted the notification).\nThe dictionary stores other related objects, if any. NSNotification objects are immutable objects.</p>\n<p>You can create a notification object with the class methods notificationWithName:object: or notificationWithName:object:userInfo:.\nHowever, you don’t usually create your own notifications directly.\nThe NSNotificationCenter methods postNotificationName:object: and postNotificationName:object:userInfo: allow you to conveniently\npost a notification without creating it first.</p>"}},"name":"Notification","params":[{"name":"notificationName","type":null},{"name":"anObject","type":null},{"name":"context","type":null},{"name":"userInfo","type":null}]}],"relativePath":"util/Notification.js"},{"childrenDocumentationJs":[],"relativePath":"util/ajax/AbstractServiceProxy.js"},{"childrenDocumentationJs":[{"description":null,"name":"NativeServiceProxy","params":null}],"relativePath":"util/ajax/NativeServiceProxy.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>A docblock about this thing</p>"}},"name":"defineProperty","params":null}],"relativePath":"util/array/index.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Helper function to convert an array of objects into a map using a key\nthat is common to all elements in the array.</p>"}},"name":"arrayToObject","params":[{"name":"array","type":null},{"name":"key","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Given an array of objects, return an array of arrays of length {size}</p>"}},"name":"chunk","params":[{"name":"array","type":null},{"name":"size","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Given an array of objects, return the first one where\nobj[fieldName] === value</p>"}},"name":"findObject","params":[{"name":"array","type":null},{"name":"fieldName","type":null},{"name":"value","type":null}]}],"relativePath":"util/array/array.js"},{"childrenDocumentationJs":[],"relativePath":"util/component/component.js"},{"childrenDocumentationJs":[],"relativePath":"util/component/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/date/date.js"},{"childrenDocumentationJs":[],"relativePath":"util/date/index.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Credit: JASON LENGSTORF\n<a href=\"https://code.lengstorf.com/get-form-values-as-json/\">https://code.lengstorf.com/get-form-values-as-json/</a></p>"}},"name":"isValidElement","params":[{"name":"element","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Checks that an element has a non-empty <code>name</code> and <code>value</code> property.</p>"}},"name":"isValidElement","params":[{"name":"element","type":{"name":"Element"}}]},{"description":{"childMarkdownRemark":{"html":"<p>Checks if an element’s value can be saved (e.g. not an unselected checkbox).</p>"}},"name":"isValidValue","params":[{"name":"element","type":{"name":"Element"}}]},{"description":{"childMarkdownRemark":{"html":"<p>Checks if an input is a checkbox, because checkboxes allow multiple values.</p>"}},"name":"isCheckbox","params":[{"name":"element","type":{"name":"Element"}}]},{"description":{"childMarkdownRemark":{"html":"<p>Checks if an input is a <code>select</code> with the <code>multiple</code> attribute.</p>"}},"name":"isMultiSelect","params":[{"name":"element","type":{"name":"Element"}}]},{"description":{"childMarkdownRemark":{"html":"<p>Retrieves the selected options from a multi-select as an array.</p>"}},"name":"getSelectValues","params":[{"name":"options","type":{"name":"HTMLOptionsCollection"}}]},{"description":{"childMarkdownRemark":{"html":"<p>Retrieves input data from a form and returns it as a JSON object.</p>"}},"name":"formToObject","params":[{"name":"form","type":null},{"name":"elements","type":{"name":"HTMLFormControlsCollection"}}]}],"relativePath":"util/form/form.js"},{"childrenDocumentationJs":[{"description":null,"name":"resize","params":[{"name":"sourceImage","type":null},{"name":"options","type":null},{"name":"image","type":null}]}],"relativePath":"util/image/image.js"},{"childrenDocumentationJs":[],"relativePath":"util/map/index.js"},{"childrenDocumentationJs":[{"description":null,"name":"firstObject","params":[{"name":"map","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Return the index of the given key in the map,\nor -1 if no such key exists;</p>"}},"name":"indexOfKey","params":[{"name":"key","type":null},{"name":"map","type":null}]}],"relativePath":"util/map/map.js"},{"childrenDocumentationJs":[],"relativePath":"util/form/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/image/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/object/index.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Given an object, return a new object with only the keys\ncontained in the given <code>keys</code> array</p>"}},"name":"filterByKeys","params":[{"name":"object","type":null},{"name":"keys","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Return a copy of the given object <em>minus</em> the given keys.</p>"}},"name":"filterExcludeKeys","params":[{"name":"object","type":null},{"name":"keys","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Return a new object containing only those key/value pairs\nthat have a non-falsy value.</p>"}},"name":"filterEmptyValues","params":[{"name":"obj","type":null},{"name":"object","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Helper function to convert an object of key:value pairs into an array\nof the form[{ key:value }, {key:value} ...]</p>"}},"name":"objectToArray","params":[{"name":"object","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Retrieves a value at the given key path.</p>"}},"name":"valueForKeyPath","params":[{"name":"object","type":null},{"name":"keyPath","type":null}]},{"description":{"childMarkdownRemark":{"html":"<p>Set a value at the given key path.</p>"}},"name":"setValueForKeyPath","params":[{"name":"obj","type":null},{"name":"keyPath","type":null},{"name":"value","type":null}]}],"relativePath":"util/object/object.js"},{"childrenDocumentationJs":[],"relativePath":"util/path/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/path/path.js"},{"childrenDocumentationJs":[],"relativePath":"util/set/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/set/set.js"},{"childrenDocumentationJs":[],"relativePath":"util/storage/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/storage/storage.js"},{"childrenDocumentationJs":[],"relativePath":"util/string/index.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Credit:\n<a href=\"https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\">https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1</a></p>"}},"name":"slugify","params":[{"name":"str","type":null}]},{"description":null,"name":"rstrip","params":[{"name":"string","type":null},{"name":"value","type":null}]},{"description":null,"name":"titleCase","params":[{"name":"str","type":null}]}],"relativePath":"util/string/string.js"},{"childrenDocumentationJs":[],"relativePath":"util/urls/index.js"},{"childrenDocumentationJs":[{"description":null,"name":"matchPath","params":[{"name":"pathname","type":null},{"name":"options","type":null}]},{"description":null,"name":"reverse","params":[{"name":"path","type":null},{"name":"params","type":null}]},{"description":null,"name":"matchesForPath","params":[{"name":"pathname","type":null},{"name":"routes","type":null}]}],"relativePath":"util/urls/urls.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>A utility class used to walk a tree using a depth-first tree traversal</p>"}},"name":"TreeEnumerator","params":[{"name":"root","type":null}]}],"relativePath":"util/tree/TreeEnumerator.js"},{"childrenDocumentationJs":[],"relativePath":"util/value/index.js"},{"childrenDocumentationJs":[{"description":{"childMarkdownRemark":{"html":"<p>Return true if a given value is anything other than:</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>An empty string</li>\n<li>NaN</li>\n</ul>"}},"name":"isValue","params":[{"name":"value","type":null}]}],"relativePath":"util/value/value.js"},{"childrenDocumentationJs":[],"relativePath":"util/geometry/rect/index.js"},{"childrenDocumentationJs":[],"relativePath":"util/geometry/rect/rect.js"}]}},"pageContext":{}},"staticQueryHashes":["3000541721"]}